# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
jobs:
  install:
    docker:
      - image: circleci/python:3.7.3

    working_directory: ~/project

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - save_cache:
          paths:
            - ./venv
          key: v2-dependencies-{{ checksum "requirements.txt" }}

      # pass installed python environment to another jobs
      - persist_to_workspace:
          root: .
          paths:
            - ./venv

  test:
    docker:
      - image: circleci/python:3.7.3

    working_directory: ~/project

    steps: 
      - checkout
        
      # load preinstalled python environment
      - attach_workspace:
          at: .

      # run tests
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            make test
      # run lint
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            sudo make install-hadolint
            make lint

  dockerize-and-publish:
    docker:
      - image: circleci/python:3.7.3

    working_directory: ~/project

    steps: 
      - checkout

      # load preinstalled python environment
      - attach_workspace:
          at: .

      - setup_remote_docker:
          version: 20.10.14

      # Build and publish docker image    
      - run:
          name: publish-docker
          command: |
            . venv/bin/activate
            docker login --username $dockerhub_username --password $dockerhub_password
            docker build -t $image_name:latest .
            docker tag $image_name:latest $dockerhub_username/$image_name
            docker push $dockerhub_username/$image_name

  infra-validate:
    docker:
      - image: hashicorp/terraform:1.3.3

    working_directory: ~/project

    steps: 
      - checkout


      - run:
          name: infra-validate
          command: |
            cd terraform
            echo "Terraform validating infrastructure deployment into the dev environment"
            terraform init -backend-config=config/dev_backend.tfvars
            terraform validate

      - persist_to_workspace:
          root: .
          paths:
            - .

  infra-plan:
    docker:
      - image: hashicorp/terraform:1.3.3

    working_directory: ~/project

    steps: 
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: infra-plan
          command: |
            cd terraform
            echo "Terraform planning infrastructure deployment into the dev environment"
            terraform plan -var-file=config/dev.tfvars -out=tfplan.json    
            terraform show --json tfplan.json

      - persist_to_workspace:
          root: .
          paths:
            - terraform

  infra-apply:
    docker:
      - image: hashicorp/terraform:1.3.3

    working_directory: ~/project

    steps: 
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: infra-apply
          command: |
            cd terraform
            echo "Terraform applying infrastructure deployment into the dev environment"
            terraform apply tfplan.json       
            terraform output -json   

  infra-destroy:
    docker:
      - image: hashicorp/terraform:1.3.3

    working_directory: ~/project

    steps: 
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: infra-destroy
          command: |
            cd terraform
            echo "Terraform destroying infrastructure deployment in dev environment"
            terraform destroy -var-file=config/dev.tfvars -auto-approve
            terraform output -json   


workflows:
  version: 2
  build:
      jobs:
        - install
        - test:
            requires:
            - install
        - dockerize-and-publish:
            requires:
            - test
            context: dockerhub-credentials
        - infra-validate:
            requires:
            - dockerize-and-publish
        - infra-plan:
            requires:
            - infra-validate
        - apply-approve:
            type: approval
            requires:
            - infra-plan
        - infra-apply:
            requires:
            - apply-approve

        - destroy-approve:
            type: approval
            requires:
            - infra-apply
        - infra-destroy:
            requires:
            - destroy-approve
